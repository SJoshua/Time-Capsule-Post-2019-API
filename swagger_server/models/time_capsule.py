# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class TimeCapsule(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, _from: str=None, to: str=None, type: str=None, content: str=None, time: int=None):  # noqa: E501
        """TimeCapsule - a model defined in Swagger

        :param _from: The _from of this TimeCapsule.  # noqa: E501
        :type _from: str
        :param to: The to of this TimeCapsule.  # noqa: E501
        :type to: str
        :param type: The type of this TimeCapsule.  # noqa: E501
        :type type: str
        :param content: The content of this TimeCapsule.  # noqa: E501
        :type content: str
        :param time: The time of this TimeCapsule.  # noqa: E501
        :type time: int
        """
        self.swagger_types = {
            '_from': str,
            'to': str,
            'type': str,
            'content': str,
            'time': int
        }

        self.attribute_map = {
            '_from': 'from',
            'to': 'to',
            'type': 'type',
            'content': 'content',
            'time': 'time'
        }
        self.__from = _from
        self._to = to
        self._type = type
        self._content = content
        self._time = time

    @classmethod
    def from_dict(cls, dikt) -> 'TimeCapsule':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The time_capsule of this TimeCapsule.  # noqa: E501
        :rtype: TimeCapsule
        """
        return util.deserialize_model(dikt, cls)

    @property
    def _from(self) -> str:
        """Gets the _from of this TimeCapsule.

        sender's name  # noqa: E501

        :return: The _from of this TimeCapsule.
        :rtype: str
        """
        return self.__from

    @_from.setter
    def _from(self, _from: str):
        """Sets the _from of this TimeCapsule.

        sender's name  # noqa: E501

        :param _from: The _from of this TimeCapsule.
        :type _from: str
        """

        self.__from = _from

    @property
    def to(self) -> str:
        """Gets the to of this TimeCapsule.

        receiver's name  # noqa: E501

        :return: The to of this TimeCapsule.
        :rtype: str
        """
        return self._to

    @to.setter
    def to(self, to: str):
        """Sets the to of this TimeCapsule.

        receiver's name  # noqa: E501

        :param to: The to of this TimeCapsule.
        :type to: str
        """

        self._to = to

    @property
    def type(self) -> str:
        """Gets the type of this TimeCapsule.

        content type  # noqa: E501

        :return: The type of this TimeCapsule.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this TimeCapsule.

        content type  # noqa: E501

        :param type: The type of this TimeCapsule.
        :type type: str
        """
        allowed_values = ["text", "audio"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def content(self) -> str:
        """Gets the content of this TimeCapsule.

        content of capsule  # noqa: E501

        :return: The content of this TimeCapsule.
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content: str):
        """Sets the content of this TimeCapsule.

        content of capsule  # noqa: E501

        :param content: The content of this TimeCapsule.
        :type content: str
        """

        self._content = content

    @property
    def time(self) -> int:
        """Gets the time of this TimeCapsule.

        timestamp  # noqa: E501

        :return: The time of this TimeCapsule.
        :rtype: int
        """
        return self._time

    @time.setter
    def time(self, time: int):
        """Sets the time of this TimeCapsule.

        timestamp  # noqa: E501

        :param time: The time of this TimeCapsule.
        :type time: int
        """

        self._time = time
